#!groovy
@Library('Infrastructure') _

def type = "java"
def product = "bulk-scan"
def component = "orchestrator"

def channel = '#bsp-build-notices'

def secrets = [
  'bulk-scan-${env}': [
    secret('idam-users-bulkscan-username', 'IDAM_USER_NAME'),
    secret('idam-users-bulkscan-password', 'IDAM_USER_PASSWORD'),
    secret('idam-client-secret', 'IDAM_CLIENT_SECRET')
  ],
  's2s-${env}'      : [
    secret('microservicekey-bulk-scan-orchestrator', 'S2S_SECRET'),
    secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
    secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
    secret('microservicekey-ccd-gw', 'API_GATEWAY_S2S_KEY'),
  ],
  'ccd-${env}'      : [
    secret('ccd-api-gateway-oauth2-client-secret', 'API_GATEWAY_IDAM_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

node {
  stage('Secrets') {
    withSubscription('nonprod') {

      environment = 'aat'

      def mapToUse = new HashMap(secrets)

      executeClosure(mapToUse) {
        sh "env"
      }

    }
  }
}

def executeClosure(Map<String, Object> secrets, Closure body) {
  def entry = secrets.entrySet().iterator().next()
  def keyVaultUrl = "https://${entry.key.replace('${env}', environment)}.vault.azure.net/"
  wrap([
    $class                   : 'AzureKeyVaultBuildWrapper',
    azureKeyVaultSecrets     : entry.value,
    keyVaultURLOverride      : keyVaultUrl,
    applicationIDOverride    : env.AZURE_CLIENT_ID,
    applicationSecretOverride: env.AZURE_CLIENT_SECRET
  ]) {
    if (secrets.size() > 1) {
      secrets.remove(entry.key)
      return executeClosure(secrets, body)
    } else {
      body.call()
    }
  }
}
