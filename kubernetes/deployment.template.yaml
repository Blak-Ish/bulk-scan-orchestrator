# Kubernetes bulk-scan-orchestrator resource template
#
# All variables are replaced at deployment time with environment variables.
#
# The following variables are derived as follows by the pipeline. DO NOT CHANGE:
#
#   - NAMESPACE:    product
#   - SERVICE_NAME: product-component-branch
#   - IMAGE_NAME:   registry-name/hmcts/product-component:branch
#
---
#
# Bulk Scan Orchestrator Config
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: bso-config
  namespace: ${NAMESPACE}
data:
  LOGBACK_REQUIRE_ALERT_LEVEL: "false"
  LOGBACK_REQUIRE_ERROR_CODE: "false"
  S2S_NAME: "bulk_scan_orchestrator"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
    spec:
      containers:
        - image: ${IMAGE_NAME}
          name: ${SERVICE_NAME}
          envFrom:
            - configMapRef:
                name: bso-config
            - configMapRef:
                name: ${SERVICE_NAME}-config
          env:
            - name: S2S_SECRET
              value: "${S2S_SECRET}"
            - name: IDAM_CLIENT_SECRET
              value: "${IDAM_CLIENT_SECRET}"
            - name: IDAM_USER_NAME
              value: "${IDAM_USER_NAME}"
            - name: IDAM_USER_PASSWORD
              value: "${IDAM_USER_PASSWORD}"
            - name: IDAM_USERS_BULKSCAN_USERNAME
              value: "${IDAM_USER_NAME}"
            - name: IDAM_USERS_BULKSCAN_PASSWORD
              value: "${IDAM_USER_PASSWORD}"
            - name: QUEUE_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: servicebus-secret-queue-${SERVICE_NAME}-envelopes
                  key: connectionString
          resources:
            requests:
              memory: "512Mi"
              cpu: "200m"
            limits:
              memory: "1024Mi"
              cpu: "2500m"
          ports:
            - containerPort: 8582
              name: http
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 3

---
---
#
# Namespace Service Catalog Servicebus namespace instance
# https://github.com/Azure/open-service-broker-azure/blob/master/docs/modules/servicebus.md
apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceInstance
metadata:
  name: servicebus-namespace-${SERVICE_NAME}
  namespace: ${NAMESPACE}
spec:
  clusterServiceClassExternalName: azure-servicebus-namespace
  clusterServicePlanExternalName: basic
  parameters:
    location: uksouth
    resourceGroup: bulk-scan-aks
    alias: servicebus-namespace-alias-${SERVICE_NAME}
---
#
# Namespace servicebus secret binding
apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceBinding
metadata:
  name: servicebus-namespace-binding-${SERVICE_NAME}
  namespace: ${NAMESPACE}
spec:
  instanceRef:
    name:  servicebus-namespace-${SERVICE_NAME}
  secretName: servicebus-secret-namespace-${SERVICE_NAME}
---
#
# Envelopes Service Catalog Servicebus queue Instance
apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceInstance
metadata:
  name: servicebus-queue-${SERVICE_NAME}-envelopes
  namespace: ${NAMESPACE}
spec:
  clusterServiceClassExternalName: azure-servicebus-queue
  clusterServicePlanExternalName: queue
  parameters:
    parentAlias:  servicebus-namespace-alias-${SERVICE_NAME}
    queueName: envelopes
---
#
# Envelopes Queue secret binding
apiVersion: servicecatalog.k8s.io/v1beta1
kind: ServiceBinding
metadata:
  name: servicebus-queue-binding-${SERVICE_NAME}-envelopes
  namespace: ${NAMESPACE}
spec:
  instanceRef:
    name:  servicebus-queue-${SERVICE_NAME}-envelopes
  secretName: servicebus-secret-queue-${SERVICE_NAME}-envelopes
---
#
# Service
#
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
  labels:
    app: ${SERVICE_NAME}
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8582
  selector:
    app: ${SERVICE_NAME}
---
#
# Ingress
#
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - host: ${SERVICE_FQDN}
      http:
        paths:
          - path: /
            backend:
              serviceName: ${SERVICE_NAME}
              servicePort: 80
